{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "author": "Nikhil Tripathi - v-ntripathi@microsoft.com",
    "comments": "Solution template for Infoblox NIOS"
  },
  "parameters": {
    "location": {
      "type": "string",
      "minLength": 1,
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Not used, but needed to pass arm-ttk test `Location-Should-Not-Be-Hardcoded`.  We instead use the `workspace-location` which is derived from the LA workspace"
      }
    },
    "workspace-location": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "[concat('Region to deploy solution resources -- separate from location selection',parameters('location'))]"
      }
    },
    "workspace": {
      "defaultValue": "",
      "type": "string",
      "metadata": {
        "description": "Workspace name for Log Analytics where Sentinel is setup"
      }
    },
    "connector1-name": {
      "type": "string",
      "defaultValue": "eeb2648f-6cb7-4aab-b99b-d53d2aaa755b"
    },
    "formattedTimeNow": {
      "type": "string",
      "defaultValue": "[utcNow('g')]",
      "metadata": {
        "description": "Appended to workbook displayNames to make them unique"
      }
    },
    "workbook1-id": {
      "type": "string",
      "defaultValue": "[newGuid()]",
      "minLength": 1,
      "metadata": {
        "description": "Unique id for the workbook"
      }
    },
    "workbook1-name": {
      "type": "string",
      "defaultValue": "Infoblox NIOS",
      "minLength": 1,
      "metadata": {
        "description": "Name for the workbook"
      }
    },
    "analytic1-id": {
      "type": "string",
      "defaultValue": "[newGuid()]",
      "minLength": 1,
      "metadata": {
        "description": "Unique id for the scheduled alert rule"
      }
    },
    "analytic2-id": {
      "type": "string",
      "defaultValue": "[newGuid()]",
      "minLength": 1,
      "metadata": {
        "description": "Unique id for the scheduled alert rule"
      }
    },
    "watchlist1-id": {
      "type": "string",
      "defaultValue": "[newGuid()]",
      "minLength": 1,
      "metadata": {
        "description": "Unique id for the watchlist"
      }
    }
  },
  "variables": {
    "connector1-source": "[concat('/subscriptions/',subscription().subscriptionId,'/resourceGroups/',resourceGroup().name,'/providers/Microsoft.OperationalInsights/workspaces/',parameters('workspace'),'/providers/Microsoft.SecurityInsights/dataConnectors/',parameters('connector1-name'))]",
    "_connector1-source": "[variables('connector1-source')]",
    "InfobloxNIOSConnector": "InfobloxNIOSConnector",
    "_InfobloxNIOSConnector": "[variables('InfobloxNIOSConnector')]",
    "Infoblox-Workbook-V2_workbook": "Infoblox-Workbook-V2_workbook",
    "_Infoblox-Workbook-V2_workbook": "[variables('Infoblox-Workbook-V2_workbook')]",
    "workbook-source": "[concat(resourceGroup().id, '/providers/Microsoft.OperationalInsights/workspaces/',parameters('workspace'))]",
    "_workbook-source": "[variables('workbook-source')]",
    "workspace-dependency": "[concat('Microsoft.OperationalInsights/workspaces/', parameters('workspace'))]",
    "InfobloxNIOS_Parser": "InfobloxNIOS_Parser",
    "_InfobloxNIOS_Parser": "[variables('InfobloxNIOS_Parser')]",
    "Infoblox_all_Parser": "Infoblox_all_Parser",
    "_Infoblox_all_Parser": "[variables('Infoblox_all_Parser')]",
    "Infoblox_allotherdhcpdTypes_Parser": "Infoblox_allotherdhcpdTypes_Parser",
    "_Infoblox_allotherdhcpdTypes_Parser": "[variables('Infoblox_allotherdhcpdTypes_Parser')]",
    "Infoblox_allotherdnsTypes_Parser": "Infoblox_allotherdnsTypes_Parser",
    "_Infoblox_allotherdnsTypes_Parser": "[variables('Infoblox_allotherdnsTypes_Parser')]",
    "Infoblox_dhcp_consolidated_Parser": "Infoblox_dhcp_consolidated_Parser",
    "_Infoblox_dhcp_consolidated_Parser": "[variables('Infoblox_dhcp_consolidated_Parser')]",
    "Infoblox_dhcpadded_Parser": "Infoblox_dhcpadded_Parser",
    "_Infoblox_dhcpadded_Parser": "[variables('Infoblox_dhcpadded_Parser')]",
    "Infoblox_dhcpbindupdate_Parser": "Infoblox_dhcpbindupdate_Parser",
    "_Infoblox_dhcpbindupdate_Parser": "[variables('Infoblox_dhcpbindupdate_Parser')]",
    "Infoblox_dhcpdiscover_Parser": "Infoblox_dhcpdiscover_Parser",
    "_Infoblox_dhcpdiscover_Parser": "[variables('Infoblox_dhcpdiscover_Parser')]",
    "Infoblox_dhcpexpire_Parser": "Infoblox_dhcpexpire_Parser",
    "_Infoblox_dhcpexpire_Parser": "[variables('Infoblox_dhcpexpire_Parser')]",
    "Infoblox_dhcpinform_Parser": "Infoblox_dhcpinform_Parser",
    "_Infoblox_dhcpinform_Parser": "[variables('Infoblox_dhcpinform_Parser')]",
    "Infoblox_dhcpoffer_Parser": "Infoblox_dhcpoffer_Parser",
    "_Infoblox_dhcpoffer_Parser": "[variables('Infoblox_dhcpoffer_Parser')]",
    "Infoblox_dhcpoption_Parser": "Infoblox_dhcpoption_Parser",
    "_Infoblox_dhcpoption_Parser": "[variables('Infoblox_dhcpoption_Parser')]",
    "Infoblox_dhcpother_Parser": "Infoblox_dhcpother_Parser",
    "_Infoblox_dhcpother_Parser": "[variables('Infoblox_dhcpother_Parser')]",
    "Infoblox_dhcppack_Parser": "Infoblox_dhcppack_Parser",
    "_Infoblox_dhcppack_Parser": "[variables('Infoblox_dhcppack_Parser')]",
    "Infoblox_dhcprelease_Parser": "Infoblox_dhcprelease_Parser",
    "_Infoblox_dhcprelease_Parser": "[variables('Infoblox_dhcprelease_Parser')]",
    "Infoblox_dhcpremoved_Parser": "Infoblox_dhcpremoved_Parser",
    "_Infoblox_dhcpremoved_Parser": "[variables('Infoblox_dhcpremoved_Parser')]",
    "Infoblox_dhcprequest_Parser": "Infoblox_dhcprequest_Parser",
    "_Infoblox_dhcprequest_Parser": "[variables('Infoblox_dhcprequest_Parser')]",
    "Infoblox_dhcpsession_Parser": "Infoblox_dhcpsession_Parser",
    "_Infoblox_dhcpsession_Parser": "[variables('Infoblox_dhcpsession_Parser')]",
    "Infoblox_dns_consolidated_Parser": "Infoblox_dns_consolidated_Parser",
    "_Infoblox_dns_consolidated_Parser": "[variables('Infoblox_dns_consolidated_Parser')]",
    "Infoblox_dnsclient_Parser": "Infoblox_dnsclient_Parser",
    "_Infoblox_dnsclient_Parser": "[variables('Infoblox_dnsclient_Parser')]",
    "Infoblox_dnsgss_Parser": "Infoblox_dnsgss_Parser",
    "_Infoblox_dnsgss_Parser": "[variables('Infoblox_dnsgss_Parser')]",
    "Infoblox_dnszone_Parser": "Infoblox_dnszone_Parser",
    "_Infoblox_dnszone_Parser": "[variables('Infoblox_dnszone_Parser')]",
    "ExcessiveNXDOMAINDNSQueries_AnalyticalRules": "ExcessiveNXDOMAINDNSQueries_AnalyticalRules",
    "_ExcessiveNXDOMAINDNSQueries_AnalyticalRules": "[variables('ExcessiveNXDOMAINDNSQueries_AnalyticalRules')]",
    "PotentialDHCPStarvationAttack_AnalyticalRules": "PotentialDHCPStarvationAttack_AnalyticalRules",
    "_PotentialDHCPStarvationAttack_AnalyticalRules": "[variables('PotentialDHCPStarvationAttack_AnalyticalRules')]",
    "InfobloxDevices": "InfobloxDevices",
    "_InfobloxDevices": "[variables('InfobloxDevices')]",
    "sourceId": "azuresentinel.azure-sentinel-solution-infobloxnios",
    "_sourceId": "[variables('sourceId')]"
  },
  "resources": [
    {
      "id": "[variables('_connector1-source')]",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',parameters('connector1-name'))]",
      "apiVersion": "2021-03-01-preview",
      "type": "Microsoft.OperationalInsights/workspaces/providers/dataConnectors",
      "location": "[parameters('workspace-location')]",
      "kind": "GenericUI",
      "properties": {
        "connectorUiConfig": {
          "title": "Infoblox NIOS",
          "publisher": "Infoblox",
          "descriptionMarkdown": "The [Infoblox Network Identity Operating System (NIOS)](https://www.infoblox.com/glossary/network-identity-operating-system-nios/) connector allows you to easily connect your Infoblox NIOS logs with Azure Sentinel, to view dashboards, create custom alerts, and improve investigation. This gives you more insight into your organization's network and improves your security operation capabilities.",
          "graphQueries": [
            {
              "metricName": "Total data received",
              "legend": "InfobloxNIOS",
              "baseQuery": "Infoblox_all"
            }
          ],
          "sampleQueries": [
            {
              "description": "Total Count by DHCP Message Types",
              "query": "Infoblox_dhcp_consolidated \n| where LogType == \"dhcpd\"  \n| where Type startswith \"DHCP\" \n| summarize count() by Type"
            },
            {
              "description": "Top 5 Source IP address",
              "query": "Infoblox_dns_consolidated \n | where LogType == \"named\" and Type == \"client\" \n| summarize count() by Client_IP \n | top 10 by count_ desc"
            }
          ],
          "dataTypes": [
            {
              "name": "Syslog (InfobloxNIOS)",
              "lastDataReceivedQuery": "Infoblox_all \n            | summarize Time = max(TimeGenerated)\n            | where isnotempty(Time)"
            }
          ],
          "connectivityCriterias": [
            {
              "type": "IsConnectedQuery",
              "value": [
                "Infoblox_all \n      | summarize LastLogReceived = max(TimeGenerated)\n            | project IsConnected = LastLogReceived > ago(7d)"
              ]
            }
          ],
          "availability": {
            "status": 1,
            "isPreview": true
          },
          "permissions": {
            "resourceProvider": [
              {
                "provider": "Microsoft.OperationalInsights/workspaces",
                "permissionsDisplayText": "write permission is required.",
                "providerDisplayName": "Workspace",
                "scope": "Workspace",
                "requiredPermissions": {
                  "write": true,
                  "delete": true
                }
              }
            ],
            "customs": [
              {
                "name": "Infoblox NIOS",
                "description": "must be configured to export logs via Syslog"
              }
            ]
          },
          "instructionSteps": [
            {
              "description": ">This data connector depends on a parser based on a Kusto Function to work as expected. [Follow the steps](https://aka.ms/sentinelgithubparsersinfoblox) to use this Kusto functions alias, **InfobloxNIOS**"
            },
            {
              "description": "Typically, you should install the agent on a different computer from the one on which the logs are generated.\n\n>  Syslog logs are collected only from **Linux** agents.",
              "instructions": [
                {
                  "parameters": {
                    "title": "Choose where to install the agent:",
                    "instructionSteps": [
                      {
                        "title": "Install agent on Azure Linux Virtual Machine",
                        "description": "Select the machine to install the agent on and then click **Connect**.",
                        "instructions": [
                          {
                            "parameters": {
                              "linkType": "InstallAgentOnLinuxVirtualMachine"
                            },
                            "type": "InstallAgent"
                          }
                        ]
                      },
                      {
                        "title": "Install agent on a non-Azure Linux Machine",
                        "description": "Download the agent on the relevant machine and follow the instructions.",
                        "instructions": [
                          {
                            "parameters": {
                              "linkType": "InstallAgentOnLinuxNonAzure"
                            },
                            "type": "InstallAgent"
                          }
                        ]
                      }
                    ]
                  },
                  "type": "InstructionStepsGroup"
                }
              ],
              "title": "1. Install and onboard the agent for Linux"
            },
            {
              "description": "Configure the facilities you want to collect and their severities.\n 1. Under workspace advanced settings **Configuration**, select **Data** and then **Syslog**.\n 2. Select **Apply below configuration to my machines** and select the facilities and severities.\n 3.  Click **Save**.",
              "instructions": [
                {
                  "parameters": {
                    "linkType": "OpenSyslogSettings"
                  },
                  "type": "InstallAgent"
                }
              ],
              "title": "2. Configure the logs to be collected"
            },
            {
              "description": "[Follow these instructions](https://www.infoblox.com/wp-content/uploads/infoblox-deployment-guide-slog-and-snmp-configuration-for-nios.pdf) to enable syslog forwarding of Infoblox NIOS Logs. Use the IP address or hostname for the Linux device with the Linux agent installed as the Destination IP address.",
              "title": "3. Configure and connect the Infoblox NIOS"
            }
          ],
          "additionalRequirementBanner": "These queries and workbooks are dependent on a parser based on a Kusto Function to work as expected. Follow the steps to use this Kusto functions alias **InfobloxNIOS** in queries and workbooks. [Follow these steps to get this Kusto functions.](https://aka.ms/sentinelgithubparsersinfoblox)"
        }
      }
    },
    {
      "type": "Microsoft.Insights/workbooks",
      "name": "[parameters('workbook1-id')]",
      "location": "[parameters('workspace-location')]",
      "kind": "shared",
      "apiVersion": "2021-08-01",
      "properties": {
        "displayName": "[concat(parameters('workbook1-name'), ' - ', parameters('formattedTimeNow'))]",
        "serializedData": "{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"26773226-79a9-4dd2-9de6-ade1f250ace6\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TimeRange\",\"label\":\"Time Range\",\"type\":4,\"isRequired\":true,\"value\":{\"durationMs\":2419200000},\"typeSettings\":{\"selectableValues\":[{\"durationMs\":300000},{\"durationMs\":900000},{\"durationMs\":1800000},{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2419200000},{\"durationMs\":2592000000},{\"durationMs\":5184000000},{\"durationMs\":7776000000}],\"allowCustom\":true}},{\"id\":\"00be31a6-f3f8-4de8-845d-7a4985d41ef3\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"InfobloxDevice\",\"label\":\"Infoblox Device\",\"type\":2,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"_GetWatchlist('InfobloxDevices')| project Computer\",\"value\":[\"computer1.domain.org\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"]},\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}],\"style\":\"above\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 0\"},{\"type\":11,\"content\":{\"version\":\"LinkItem/1.0\",\"style\":\"tabs\",\"links\":[{\"id\":\"edf8a22f-492e-4c73-b113-31cb1bfee2ff\",\"cellValue\":\"selectedTab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"DHCP\",\"subTarget\":\"DHCPTab\",\"preText\":\"DHCP\",\"style\":\"link\"},{\"id\":\"f6c0c04f-5e57-43fb-9daf-f18a44dd1d87\",\"cellValue\":\"selectedTab\",\"linkTarget\":\"parameter\",\"linkLabel\":\"DNS\",\"subTarget\":\"DNSTab\",\"style\":\"link\"}]},\"name\":\"links - 1\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"Infoblox_dhcp_consolidated\\r\\n| where Computer in ({InfobloxDevice}) or '*' in ({InfobloxDevice})\\r\\n| where Type startswith \\\"DHCP\\\"\\r\\n| summarize count() by Type, bin(TimeGenerated, {TimeRange:grain})\",\"size\":0,\"title\":\"Total Events by DHCP Message Type\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"barchart\"},\"conditionalVisibility\":{\"parameterName\":\"selectedTab\",\"comparison\":\"isEqualTo\",\"value\":\"DHCPTab\"},\"name\":\"query - 4\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"union isfuzzy=true\\r\\nInfoblox_dhcpdiscover,Infoblox_dhcprequest,Infoblox_dhcpinform\\r\\n| where Computer in ({InfobloxDevice}) or '*' in ({InfobloxDevice})\\r\\n| where Type in (\\\"DHCPDISCOVER\\\",\\\"DHCPREQUEST\\\",\\\"DHCPINFORM\\\")\\r\\n| summarize count() by Type, bin(TimeGenerated, {TimeRange:grain})\",\"size\":0,\"title\":\"DHCP Requests by Message Type\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"areachart\",\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"DHCPREQUEST\",\"color\":\"magenta\"},{\"seriesName\":\"DHCPDISCOVER\",\"color\":\"green\"},{\"seriesName\":\"DHCPINFORM\",\"color\":\"blue\"}],\"xSettings\":{\"numberFormatSettings\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":true}}}}},\"conditionalVisibility\":{\"parameterName\":\"selectedTab\",\"comparison\":\"isEqualTo\",\"value\":\"DHCPTab\"},\"customWidth\":\"50\",\"name\":\"query - 4 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"union isfuzzy=true\\r\\nInfoblox_dhcpadded, Infoblox_dhcpbindupdate,Infoblox_dhcpdiscover,Infoblox_dhcpexpire,Infoblox_dhcpinform,Infoblox_dhcpoffer\\r\\n,Infoblox_dhcpoption,Infoblox_dhcpother,Infoblox_dhcprelease,Infoblox_dhcpremoved,Infoblox_dhcprequest,Infoblox_dhcpsession\\r\\n,Infoblox_dnsclient,Infoblox_allotherdhcpdTypes\\r\\n| where Computer in ({InfobloxDevice}) or '*' in ({InfobloxDevice})\\r\\n| where Type in (\\\"DHCPRESPONSE\\\",\\\"DHCPOFFER\\\")\\r\\n| summarize count() by Type, bin(TimeGenerated, {TimeRange:grain})\",\"size\":0,\"title\":\"DHCP Responses by Message Type\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"areachart\",\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"DHCPOFFER\",\"color\":\"blue\"},{\"seriesName\":\"DHCPRESPONSE\",\"color\":\"magenta\"}]}},\"conditionalVisibility\":{\"parameterName\":\"selectedTab\",\"comparison\":\"isEqualTo\",\"value\":\"DHCPTab\"},\"customWidth\":\"50\",\"name\":\"query - 4 - Copy - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"Infoblox_dhcpdiscover\\r\\n| where Computer in ({InfobloxDevice}) or '*' in ({InfobloxDevice})\\r\\n| where Log_Type == \\\"DHCPDISCOVER\\\"\\r\\n| summarize count() by tostring(Client_MAC_Address)\\r\\n| top 10 by count_\",\"size\":0,\"title\":\"Top 10 Clients by Requests\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"count_\",\"formatter\":3,\"formatOptions\":{\"palette\":\"coldHot\"}}],\"labelSettings\":[{\"columnId\":\"Client_MAC_Address\",\"label\":\"Client MAC Address\"},{\"columnId\":\"count_\",\"label\":\"Total\"}]}},\"conditionalVisibility\":{\"parameterName\":\"selectedTab\",\"comparison\":\"isEqualTo\",\"value\":\"DHCPTab\"},\"customWidth\":\"50\",\"name\":\"query - 4 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"Infoblox_dhcp_consolidated\\r\\n| where ProcessName == \\\"dhcpd\\\"\\r\\n| summarize count() by tostring(Network)\\r\\n| distinct Network\\r\\n\\r\\n\",\"size\":0,\"title\":\"Top 10 Clients by Requests\",\"timeContext\":{\"durationMs\":604800000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"table\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"count_\",\"formatter\":3,\"formatOptions\":{\"palette\":\"coldHot\"}}]}},\"conditionalVisibility\":{\"parameterName\":\"selectedTab\",\"comparison\":\"isEqualTo\",\"value\":\"DHCPTab\"},\"customWidth\":\"50\",\"name\":\"query - 4 - Copy - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"Infoblox_dns_consolidated \\r\\n| where ProcessName == \\\"named\\\"\\r\\n| where Computer in ({InfobloxDevice}) or '*' in ({InfobloxDevice})\\r\\n| summarize count() by Computer, bin(TimeGenerated,15m)\",\"size\":0,\"showAnnotations\":true,\"title\":\"DNS Activity by Server\",\"color\":\"magenta\",\"timeContext\":{\"durationMs\":604800000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"areachart\"},\"conditionalVisibility\":{\"parameterName\":\"selectedTab\",\"comparison\":\"isEqualTo\",\"value\":\"DNSTab\"},\"name\":\"query - 6\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"Infoblox_dnsclient \\r\\n| where ProcessName == \\\"named\\\" and Log_Type == \\\"client\\\"\\r\\n| where Computer in ({InfobloxDevice}) or '*' in ({InfobloxDevice})\\r\\n| summarize Response = countif(isnotempty(ResponseCode)), Request = countif(isnotempty(QueryDomainName) and isempty(ResponseCode)), count() by bin(TimeGenerated, {TimeRange:grain})\\r\\n| project-away count_\",\"size\":0,\"showAnnotations\":true,\"title\":\"DNS Requests vs Responses\",\"color\":\"magenta\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"linechart\",\"graphSettings\":{\"type\":0}},\"conditionalVisibility\":{\"parameterName\":\"selectedTab\",\"comparison\":\"isEqualTo\",\"value\":\"DNSTab\"},\"customWidth\":\"50\",\"name\":\"query - 6 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"Infoblox_dnsclient \\r\\n| where ProcessName == \\\"named\\\" and Log_Type == \\\"client\\\"\\r\\n| where Computer in ({InfobloxDevice}) or '*' in ({InfobloxDevice})\\r\\n| where isnotempty(ResponseCode)\\r\\n| summarize count() by tostring(ResponseCode), bin(TimeGenerated, {TimeRange:grain})\\r\\n\",\"size\":0,\"title\":\"DNS Response Code\",\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"visualization\":\"barchart\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"count_\",\"formatter\":3,\"formatOptions\":{\"palette\":\"turquoise\"}}],\"labelSettings\":[{\"columnId\":\"count_\",\"label\":\"Total\"}]}},\"conditionalVisibility\":{\"parameterName\":\"selectedTab\",\"comparison\":\"isEqualTo\",\"value\":\"DNSTab\"},\"customWidth\":\"50\",\"name\":\"query - 7 - Copy - Copy\",\"styleSettings\":{\"margin\":\"50\"}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"Infoblox_dnsclient \\r\\n| where ProcessName == \\\"named\\\" and Log_Type == \\\"client\\\"\\r\\n| where Computer in ({InfobloxDevice}) or '*' in ({InfobloxDevice})\\r\\n| where isempty(ResponseCode) and isnotempty(QueryDomainName)\\r\\n| summarize count() by tostring(Client_IP)\\r\\n| top 10 by count_\",\"size\":0,\"title\":\"Top 10 DNS Request Clients\",\"timeContext\":{\"durationMs\":604800000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"count_\",\"formatter\":3,\"formatOptions\":{\"palette\":\"turquoise\"}}],\"labelSettings\":[{\"columnId\":\"Client_IP\",\"label\":\"Client IP\"},{\"columnId\":\"count_\",\"label\":\"Total\"}]}},\"conditionalVisibility\":{\"parameterName\":\"selectedTab\",\"comparison\":\"isEqualTo\",\"value\":\"DNSTab\"},\"customWidth\":\"50\",\"name\":\"query - 7\",\"styleSettings\":{\"margin\":\"50\"}},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"Infoblox_dnsclient \\r\\n| where ProcessName == \\\"named\\\" and Log_Type == \\\"client\\\"\\r\\n| where Computer in ({InfobloxDevice}) or '*' in ({InfobloxDevice})\\r\\n| where isempty(ResponseCode) and isnotempty(QueryDomainName)\\r\\n| summarize count() by tostring(QueryDomainName)\\r\\n| top 10 by count_\",\"size\":0,\"title\":\"Top 10 DNS Request Domains\",\"timeContext\":{\"durationMs\":604800000},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"count_\",\"formatter\":3,\"formatOptions\":{\"palette\":\"turquoise\"}}],\"labelSettings\":[{\"columnId\":\"QueryDomainName\",\"label\":\"Domain Name\"},{\"columnId\":\"count_\",\"label\":\"Total\"}]}},\"conditionalVisibility\":{\"parameterName\":\"selectedTab\",\"comparison\":\"isEqualTo\",\"value\":\"DNSTab\"},\"customWidth\":\"50\",\"name\":\"query - 7 - Copy\",\"styleSettings\":{\"margin\":\"50\"}}],\"fromTemplateId\":\"sentinel-Infoblox\",\"$schema\":\"https://github.com/Microsoft/Application-Insights-Workbooks/blob/master/schema/workbook.json\"}\r\n",
        "version": "1.0",
        "sourceId": "[variables('_workbook-source')]",
        "category": "sentinel"
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2020-08-01",
      "name": "[parameters('workspace')]",
      "location": "[parameters('workspace-location')]",
      "resources": [
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "InfobloxNIOS Parser",
          "dependsOn": [
            "[variables('workspace-dependency')]"
          ],
          "properties": {
            "eTag": "*",
            "displayName": "InfobloxNIOS Parser",
            "category": "Samples",
            "functionAlias": "InfobloxNIOS",
            "query": "\n\r\nlet RawData = Syslog \r\n    | where Computer in (\"Computer1\",\"Computer2\") and Facility == \"local6\"\r\n    | extend Parser = extract_all(@\"^(\\d{2}\\-[a-zA-Z]{3}\\-\\d{4}\\s[0-9\\.\\:]+)?\\s?([a-zA-Z-_]+)(\\s|\\:)?(.*)\", dynamic([1,2,3,4]), SyslogMessage)\r\n    | mv-expand todynamic(Parser)\r\n    | extend responseTime = todatetime(Parser[0]),\r\n            Log_Type = tostring(Parser[1]),\r\n            RawData_subString = tostring(Parser[3])\r\n    | project-away Parser;\r\nlet dhcpdiscover = RawData\r\n    | where ProcessName == \"dhcpd\" and Log_Type == \"DHCPDISCOVER\"\r\n    | extend dhcpdiscover = extract_all(@\"\\w+\\s((\\S+)(\\s\\(\\S+\\))?)\\s\\w+\\s(\\S+)\\sTransID\\s([a-z0-9]+)\\:?(\\suid\\s(\\S+))?(\\snetwork\\s(\\S+)\\:)?\\s?(.*)?\", dynamic([1,2,3,4,5,6,7,8,9,10]), RawData_subString)\r\n    | mv-expand todynamic(dhcpdiscover)\r\n    | extend Client_MAC_Address = tostring(dhcpdiscover[0]), \r\n        TransID = tostring(dhcpdiscover[4]),\r\n        UID = tostring(dhcpdiscover[6]), \r\n        Network = tostring(dhcpdiscover[8]),\r\n        Message = tostring(dhcpdiscover[9])\r\n    | project-away RawData_subString, dhcpdiscover;\r\nlet dhcprequest = RawData\r\n    | where ProcessName == \"dhcpd\" and Log_Type == \"DHCPREQUEST\"\r\n    | extend dhcprequest = extract_all(@\"for\\s((\\S+)(\\s\\(\\S+\\))?)\\sfrom\\s((\\S+)(\\s\\(\\S+\\))?)\\svia\\s(\\S+)(\\sTransID\\s([a-z0-9]+)\\s)?(uid\\s([a-z0-9:]+)|uid$|uid)?(\\s\\(([a-zA-Z]+)\\)$)?\", dynamic([1,2,3,4,5,6,7,8,9,10,11,12]), RawData_subString)\r\n    | mv-expand todynamic(dhcprequest)\r\n    | extend IPAddress = tostring(dhcprequest[1]), \r\n        Client_MAC_Address = tostring(dhcprequest[4]),\r\n        Client_Hostname = extract(@\"\\((\\S+)\\)\",1,tostring(dhcprequest[5])),\r\n        Relay = tostring(dhcprequest[6]), \r\n        TransID = tostring(dhcprequest[8]),\r\n        UID = tostring(dhcprequest[10]),\r\n        State = tostring(dhcprequest[11])\r\n    | project-away RawData_subString, dhcprequest;\r\nlet dhcprelease = RawData\r\n    | where ProcessName == \"dhcpd\" and Log_Type == \"DHCPRELEASE\"\r\n    | extend dhcprelease = extract_all(@\"of\\s(\\S+)\\sfrom\\s((\\S+)(\\s\\(\\S+\\))?)\\svia\\s(\\S+)(\\s\\((\\w+)\\))?(\\sTransID\\s([a-z0-9]+)\\s)?\", dynamic([1,2,3,4,5,6,7,8,9,10,11,12]), RawData_subString)\r\n    | mv-expand todynamic(dhcprelease)\r\n    | extend IPAddress = tostring(dhcprelease[0]), \r\n        Client_MAC_Address = tostring(dhcprelease[2]),\r\n        Client_Hostname = extract(@'\\((\\S+)\\)',1,tostring(dhcprelease[3])),\r\n        Relay = tostring(dhcprelease[4]), \r\n        TransID = tostring(dhcprelease[8]),\r\n        State = tostring(dhcprelease[6])\r\n    | project-away RawData_subString, dhcprelease;\r\nlet dhcpack = RawData\r\n    | where ProcessName == \"dhcpd\" and Log_Type == \"DHCPACK\"\r\n    | extend dhcpack = extract_all(@\"(\\s\\w+\\s(\\S+))\\sto\\s(\\S+)\\svia\\s(\\S+)(\\srelay\\s(\\S+))?(\\slease-duration\\s(\\d+))?(\\s\\(([a-zA-Z]+)\\))?(\\suid\\s(\\S+))?\", dynamic([1,2,3,4,5,6,7,8,9,10,11]), RawData_subString)\r\n    | mv-expand todynamic(dhcpack)\r\n    | extend IPAddress = tostring(dhcpack[1]), \r\n        Client_MAC_Address = tostring(dhcpack[2]),\r\n        Interface = tostring(dhcpack[4]),\r\n        Relay = tostring(dhcpack[5]), \r\n        LeaseDuration = tostring(dhcpack[7]),\r\n        Client_Hostname = tostring(dhcpack[3]),\r\n        State = tostring(dhcpack[10])\r\n    | extend dhcpack2 = extract_all(@\"to\\s(\\S+)\\s\\((\\S+)\\)\\svia\\s(\\S+)\", dynamic([1,2,3]), RawData_subString)\r\n    | mv-expand todynamic(dhcpack2)\r\n    | extend IPAddress = iif(isempty(dhcpack),tostring(dhcpack2[0]),IPAddress),\r\n            Client_MAC_Address = iif(isempty(dhcpack),tostring(dhcpack2[1]),Client_MAC_Address),\r\n            Interface = iif(isempty(dhcpack),tostring(dhcpack2[2]),Interface)\r\n    | project-away RawData_subString, dhcpack, dhcpack2;\r\nlet dhcpinform = RawData\r\n    | where ProcessName == \"dhcpd\" and Log_Type == \"DHCPINFORM\"\r\n    | extend dhcpinform = extract_all(@\"\\w+\\s(\\S+)\\svia\\s(\\S+)\\sTransID\\s([a-z0-9]+)\", dynamic([1,2,3]), RawData_subString)\r\n    | mv-expand todynamic(dhcpinform)\r\n    | extend Source_IP = tostring(dhcpinform[0]), \r\n        Relay = tostring(dhcpinform[1]), \r\n        TransID = tostring(dhcpinform[2])\r\n    | project-away RawData_subString, dhcpinform;\r\nlet dhcpoffer = RawData\r\n    | where ProcessName == \"dhcpd\" and Log_Type == \"DHCPOFFER\"\r\n    | extend dhcpoffer = extract_all(@\"\\w+\\s(\\S+)(\\s\\w+\\s((\\S+)(\\s\\(\\S+\\))?))?\\svia\\s(\\S+)(\\srelay\\s(\\S+))?(\\slease-duration\\s(\\d+))?(\\soffered-duration\\s(\\d+))?(\\sUID\\s(\\S+))?\", dynamic([1,2,3,4,5,6,7,8,9,10,11,12,13,14]), RawData_subString)\r\n    | mv-expand todynamic(dhcpoffer)\r\n    | extend IPAddress = tostring(dhcpoffer[0]),  \r\n        Client_MAC_Address = tostring(dhcpoffer[3]),\r\n        Interface = tostring(dhcpoffer[5]),\r\n        Relay = tostring(dhcpoffer[7]), \r\n        LeaseDuration = tostring(dhcpoffer[9]),\r\n        OfferedDuration = tostring(dhcpoffer[11]),\r\n        Client_Hostname = tostring(dhcpoffer[4]),\r\n        UID = tostring(dhcpoffer[13])\r\n    | project-away RawData_subString, dhcpoffer;\r\nlet dhcpexpire = RawData\r\n    | where ProcessName == \"dhcpd\" and Log_Type == \"DHCPEXPIRE\"\r\n    | extend dhcpexpire = extract_all(@\"\\w+\\s(\\S+)\\s\\w+\\s(\\S+)\", dynamic([1,2]), RawData_subString)\r\n    | mv-expand todynamic(dhcpexpire)\r\n    | extend Source_IP = tostring(dhcpexpire[0]),  \r\n        Dest_MAC_Address = tostring(dhcpexpire[1])\r\n    | project-away RawData_subString, dhcpexpire;\r\nlet dhcpsession = RawData\r\n    | where ProcessName == \"dhcpd\" and Log_Type == \"r-l-e\"\r\n    | extend dhcpsession = extract_all(@\"\\:?([0-9.]+)\\,([a-zA-Z]+)\\,([a-zA-Z0-9-]+)\\,([a-z0-9:]+)\\,([0-9]+)\\,([0-9]+)\\,([0-9]+)?\\,([\\w$\\s]+)\\,([0-9.]+)\\,([0-9]+)\\,([0-9-.]+)\", dynamic([1,2,3,4,5,6,7,8,9,10,11]), RawData_subString)\r\n    | mv-expand todynamic(dhcpsession)\r\n    | extend Dest_IP = tostring(dhcpsession[0]),  \r\n        Signature = tostring(dhcpsession[1]),\r\n        DNS_Hostname = tostring(dhcpsession[2]),  \r\n        Dest_MAC_Address = tostring(dhcpsession[3]),\r\n        StartTime = tostring(dhcpsession[4]),  \r\n        EndTime = tostring(dhcpsession[5]),  \r\n        Network = tostring(dhcpsession[8]),\r\n        NetworkRange = tostring(dhcpsession[10])\r\n    | project-away RawData_subString, dhcpsession;\r\nlet dhcpbindupdate = RawData\r\n    | where ProcessName == \"dhcpd\" and Log_Type == \"bind\"\r\n    | extend dhcpbindupdate = extract_all(@\"^\\s?(\\w+)\\s\\w+\\s([0-9.]+)\\sfrom\\s(\\S+)\\s(\\w+)\\:\\s(.*)\", dynamic([1,2,3,4,5]), RawData_subString)\r\n    | mv-expand todynamic(dhcpbindupdate)\r\n    | extend Log_Type = strcat(Type,\" \",tostring(dhcpbindupdate[0])),\r\n        Dest_IP = tostring(dhcpbindupdate[1]),  \r\n        Source = tostring(dhcpbindupdate[2]),\r\n        Action = tostring(dhcpbindupdate[3]),  \r\n        Message = tostring(dhcpbindupdate[4])\r\n    | project-away RawData_subString, dhcpbindupdate;\r\nlet dhcpadded = RawData\r\n    | where ProcessName == \"dhcpd\" and Log_Type == \"Added\"\r\n    | extend dhcpadded = extract_all(@\"([\\w\\s]+)\\sfrom\\s(\\S+)\\sto\\s(\\S+)\", dynamic([1,2,3,4,5]), RawData_subString)\r\n    | mv-expand todynamic(dhcpadded)\r\n    | extend Log_Type = strcat(Type,\" \",tostring(dhcpadded[0])),\r\n        Source = tostring(dhcpadded[1]),  \r\n        Dest = tostring(dhcpadded[2])\r\n    | project-away RawData_subString, dhcpadded;\r\nlet dhcpoption = RawData\r\n    | where ProcessName == \"dhcpd\" and Log_Type == \"Option\"\r\n    | extend dhcpoption = extract_all(@'(\\d+)\\:\\s\\w+\\s\\w+\\s([A-Z\\s]+)\\s\\w+\\sfrom\\s\\S+\\s(\\S+)\\s[\\w\\s\\-]+\\\"([a-z0-9:]+)\\\"\\,\\s[\\w\\s\\-]+\\\"([a-z0-9:]+)\\\"\\sfor\\s(\\S+)\\s\\((\\S+)\\)\\s([\\w\\s]+)\\.\\s\\((\\S+)\\)', dynamic([1,2,3,4,5,6,7,8,9]), RawData_subString)\r\n    | mv-expand todynamic(dhcpoption)\r\n    | extend Log_Type = strcat(Type,\" \",tostring(dhcpoption[0])),\r\n        Relay = tostring(dhcpoption[2]),  \r\n        PacketType = tostring(dhcpoption[1]),  \r\n        CircuitID = tostring(dhcpoption[3]),  \r\n        RemoteID = tostring(dhcpoption[4]),  \r\n        Dest_IP = tostring(dhcpoption[5]),  \r\n        Dest_MAC_Address = tostring(dhcpoption[6]),  \r\n        Message = tostring(dhcpoption[7]),\r\n        State = tostring(dhcpoption[8])\r\n    | project-away RawData_subString, dhcpoption;\r\nlet dhcpremoved = RawData\r\n    | where ProcessName == \"dhcpd\" and Log_Type == \"Removed\"\r\n    | extend dhcpremoved = extract_all(@\"([\\w\\s]+)(from|on)\\s(\\S+)(\\sto\\s(\\S+))?\", dynamic([1,2,3,4,5]), RawData_subString)\r\n    | mv-expand todynamic(dhcpremoved)\r\n    | extend Log_Type = strcat(Type,\" \",tostring(dhcpremoved[0])),\r\n        Source = tostring(dhcpremoved[2]),  \r\n        Dest = tostring(dhcpremoved[4])\r\n    | project-away RawData_subString, dhcpremoved;\r\nlet dhcpother = RawData\r\n    | where ProcessName == \"dhcpd\" and Type in (\"balanced\",\"balancing\",\"failover\")\r\n    | project-rename Message = RawData_subString;\r\nlet dnszone = RawData\r\n    | where ProcessName == \"named\" and Log_Type == \"zone\"\r\n    | extend dnszone = extract_all(@\"([a-z0-9\\.\\-]+)\\/([A-Z]+)\\:(\\s[A-Z]+)?\\s(\\w+\\s\\w+)\\s(for\\s\\'(\\S+)?\\':)?((\\d+)\\.?)?(\\s(\\with\\s|(\\d+)\\sIN\\s)([A-Z]+)\\s)?(\\(?serial\\s(\\d+)\\)?)?(.*)\", dynamic([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]), RawData_subString)\r\n    | mv-expand todynamic(dnszone)\r\n    | extend Zone = tostring(dnszone[0]),\r\n        Action = tostring(dnszone[3]),\r\n        Client_Hostname = tostring(dnszone[5]),\r\n        TransID = tostring(dnszone[7]),\r\n        Serial = tostring(dnszone[13]),\r\n        TTL = tostring(dnszone[10]),\r\n        RecordType = tostring(dnszone[11])\r\n    | extend dnszone_substring = extract_all(@\"\\s?([a-zA-Z0-9\\.\\-\\_]+)\\.\\s(.*)\", dynamic([1,2]),tostring(dnszone[14]))\r\n    | mv-expand todynamic(dnszone_substring)\r\n    | extend Host = tostring(dnszone_substring[0]),\r\n        Message = tostring(dnszone_substring[1])\r\n    | project-away RawData_subString, dnszone_substring, dnszone;\r\nlet dnsclient = RawData \r\n    | where ProcessName == \"named\" and Log_Type == \"client\"\r\n    | extend dnsclient = extract_all(@\"(\\@[a-z0-9]+\\s)?([0-9\\.]+)\\#(\\d+)(\\s\\((\\S+)\\))?\\:\\s(?:view\\s)?(\\S+)?(?:\\:\\s)?((UDP|TCP)\\:\\s?)??query\\:\\s(\\S+)\\s(\\S+)\\s(\\S+)(\\sresponse:\\s([A-Z]+))?\\s(\\S+)(.*)\",dynamic([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]), RawData_subString)\r\n    | mv-expand todynamic(dnsclient)\r\n    | extend Client_IP = tostring(dnsclient[1]),\r\n        Port = tostring(dnsclient[2]),\r\n        Protocol = tostring(dnsclient[7]),\r\n        QueryDomainName = tostring(dnsclient[8]),\r\n        ClassName = tostring(dnsclient[9]),\r\n        RecordType = tostring(dnsclient[10]),\r\n        ResponseCode = tostring(dnsclient[12]),\r\n        Flag = tostring(dnsclient[13]),\r\n        Message = tostring(dnsclient[14])\r\n    | project-away RawData_subString, dnsclient;\r\nlet dnsgss = RawData\r\n    | where ProcessName == \"named\" and Log_Type == \"gss_accept_sec_context\"\r\n    | extend dnsgss = extract_all(@\":\\s(.*)\", dynamic([1,2]), RawData_subString)\r\n    | mv-expand todynamic(dnsgss)\r\n    | extend Message = tostring(dnsgss[0])\r\n    | project-away dnsgss, RawData_subString;\r\nlet allotherLogTypes = RawData\r\n    | where ProcessName !in (\"dhcp\",\"named\");\r\nlet allotherdhcpdTypes = RawData\r\n    | where ProcessName == \"dhcpd\" and Type !in (\"DHCPEXPIRE\",\"DHCPOFFER\",\"DHCPINFORM\",\"DHCPACK\",\"DHCPDISCOVER\",\"DHCPRELEASE\",\"DHCPACK\",\"r-l-e\", \"bind\",\"Added\",\"Option\", \"Removed\",\"balanced\",\"balancing\",\"failover\");\r\nlet allotherdnsTypes = RawData\r\n    | where ProcessName == \"named\" and Type !in (\"zone\",\"client\",\"gss_accept_sec_context\");\r\nunion dhcpdiscover, dhcprequest, dhcprelease, dhcpack, dhcpoffer, dhcpexpire, dhcpbindupdate, dhcpadded, dhcpoption, dhcpremoved, dhcpsession, dhcpother, dnszone, dnsclient, dnsgss, allotherLogTypes, allotherdhcpdTypes, allotherdnsTypes\r\n| project-away RawData_subString\r\n",
            "version": 1
          }
        },
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "Infoblox all Parser",
          "dependsOn": [
            "[variables('workspace-dependency')]"
          ],
          "properties": {
            "eTag": "*",
            "displayName": "Infoblox all Parser",
            "category": "Samples",
            "functionAlias": "Infoblox_all",
            "query": "\nunion isfuzzy=true\r\nInfoblox_dnsclient,Infoblox_dnsgss,Infoblox_dnszone,Infoblox_allotherdnsTypes,Infoblox_dhcpadded, Infoblox_dhcpbindupdate,Infoblox_dhcpdiscover,Infoblox_dhcpexpire,Infoblox_dhcpinform,Infoblox_dhcpoffer,Infoblox_dhcpoption,Infoblox_dhcpother,Infoblox_dhcprelease,Infoblox_dhcpremoved,Infoblox_dhcprequest,Infoblox_dhcpsession,Infoblox_dnsclient,Infoblox_allotherdhcpdTypes",
            "version": 1
          }
        },
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "Infoblox all other dhcpd Types Parser",
          "dependsOn": [
            "[variables('workspace-dependency')]"
          ],
          "properties": {
            "eTag": "*",
            "displayName": "Infoblox all other dhcpd Types Parser",
            "category": "Samples",
            "functionAlias": "Infoblox_allotherdhcpdTypes",
            "query": "\nlet datasource = (_GetWatchlist('InfobloxDevices') | project Computer);\r\nlet RawData = Syslog\r\n    | where Computer in (datasource)// and Facility == \"local6\"\r\n    | extend Parser = extract_all(@\"^(\\d{2}\\-[a-zA-Z]{3}\\-\\d{4}\\s[0-9\\.\\:]+)?\\s?([a-zA-Z-_]+)(\\s|\\:)?(.*)\", dynamic([1,2,3,4]), SyslogMessage)[0]\r\n    | extend responseTime = todatetime(Parser[0]),\r\n            Log_Type = tostring(Parser[1]),\r\n            RawData_subString = tostring(Parser[3])\r\n    | project-away Parser;\r\nRawData\r\n    | where ProcessName == \"dhcpd\" and Log_Type !in (\"DHCPEXPIRE\",\"DHCPOFFER\",\"DHCPINFORM\",\"DHCPACK\",\"DHCPDISCOVER\",\"DHCPRELEASE\",\"DHCPACK\",\"r-l-e\", \"bind\",\"Added\",\"Option\", \"Removed\",\"balanced\",\"balancing\",\"failover\");",
            "version": 1
          }
        },
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "Infoblox all other dns Types Parser",
          "dependsOn": [
            "[variables('workspace-dependency')]"
          ],
          "properties": {
            "eTag": "*",
            "displayName": "Infoblox all other dns Types Parser",
            "category": "Samples",
            "functionAlias": "Infoblox_allotherdnsTypes",
            "query": "\nlet datasource = (_GetWatchlist('InfobloxDevices') | project Computer);\r\nlet RawData = Syslog\r\n    | where Computer in (datasource)// and Facility == \"local6\"\r\n    | extend Parser = extract_all(@\"^(\\d{2}\\-[a-zA-Z]{3}\\-\\d{4}\\s[0-9\\.\\:]+)?\\s?([a-zA-Z-_]+)(\\s|\\:)?(.*)\", dynamic([1,2,3,4]), SyslogMessage)[0]\r\n    | extend responseTime = todatetime(Parser[0]),\r\n            Log_Type = tostring(Parser[1]),\r\n            RawData_subString = tostring(Parser[3])\r\n    | project-away Parser;\r\nRawData\r\n    | where ProcessName == \"named\" and Log_Type !in (\"zone\",\"client\",\"gss_accept_sec_context\");",
            "version": 1
          }
        },
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "Infoblox dhcp consolidated Parser",
          "dependsOn": [
            "[variables('workspace-dependency')]"
          ],
          "properties": {
            "eTag": "*",
            "displayName": "Infoblox dhcp consolidated Parser",
            "category": "Samples",
            "functionAlias": "Infoblox_dhcp_consolidated",
            "query": "\nunion isfuzzy=true\r\nInfoblox_dhcpadded, Infoblox_dhcpbindupdate,Infoblox_dhcpdiscover,Infoblox_dhcpexpire,Infoblox_dhcpinform,Infoblox_dhcpoffer\r\n,Infoblox_dhcpoption,Infoblox_dhcpother,Infoblox_dhcprelease,Infoblox_dhcpremoved,Infoblox_dhcprequest,Infoblox_dhcpsession\r\n,Infoblox_dnsclient,Infoblox_allotherdhcpdTypes",
            "version": 1
          }
        },
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "Infoblox dhcp added Parser",
          "dependsOn": [
            "[variables('workspace-dependency')]"
          ],
          "properties": {
            "eTag": "*",
            "displayName": "Infoblox dhcp added Parser",
            "category": "Samples",
            "functionAlias": "Infoblox_dhcpadded",
            "query": "\nlet datasource = (_GetWatchlist('InfobloxDevices') | project Computer);\r\nlet RawData = Syslog\r\n    | where Computer in (datasource) //and Facility == \"local6\"\r\n    | extend Parser = extract_all(@\"^(\\d{2}\\-[a-zA-Z]{3}\\-\\d{4}\\s[0-9\\.\\:]+)?\\s?([a-zA-Z-_]+)(\\s|\\:)?(.*)\", dynamic([1,2,3,4]), SyslogMessage)[0]\r\n    | extend responseTime = todatetime(Parser[0]),\r\n            Log_Type = tostring(Parser[1]),\r\n            RawData_subString = tostring(Parser[3])\r\n    | project-away Parser;\r\nRawData \r\n    | where ProcessName == \"dhcpd\" and SyslogMessage has \"Added\"\r\n    | extend dhcpadded = extract_all(@\"([\\w\\s]+)\\sfrom\\s(\\S+)\\sto\\s(\\S+)\", dynamic([1,2,3,4,5]), RawData_subString)[0]\r\n\t| mv-apply dhcpadded on (\r\n    summarize dhcpadded = make_list(tostring(dhcpadded), 8))\r\n    | extend Log_Type = strcat(Type,\" \",dhcpadded[0]),\r\n        Source = dhcpadded[1],  \r\n        Dest = dhcpadded[2]\r\n    | project-away RawData_subString, dhcpadded;",
            "version": 1
          }
        },
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "Infoblox dhcp bind update Parser",
          "dependsOn": [
            "[variables('workspace-dependency')]"
          ],
          "properties": {
            "eTag": "*",
            "displayName": "Infoblox dhcp bind update Parser",
            "category": "Samples",
            "functionAlias": "Infoblox_dhcpbindupdate",
            "query": "\nlet datasource = (_GetWatchlist('InfobloxDevices') | project Computer);\r\nlet RawData = Syslog\r\n    | where Computer in (datasource) //and Facility == \"local6\"\r\n    | extend Parser = extract_all(@\"^(\\d{2}\\-[a-zA-Z]{3}\\-\\d{4}\\s[0-9\\.\\:]+)?\\s?([a-zA-Z-_]+)(\\s|\\:)?(.*)\", dynamic([1,2,3,4]), SyslogMessage)[0]\r\n    | extend responseTime = todatetime(Parser[0]),\r\n            Log_Type = tostring(Parser[1]),\r\n            RawData_subString = tostring(Parser[3])\r\n    | project-away Parser;\r\nRawData\r\n    | where ProcessName == \"dhcpd\" and SyslogMessage has \"bind\"\r\n    | extend dhcpbindupdate = extract_all(@\"^\\s?(\\w+)\\s\\w+\\s([0-9.]+)\\sfrom\\s(\\S+)\\s(\\w+)\\:\\s(.*)\", dynamic([1,2,3,4,5]), RawData_subString)[0]\r\n\t| mv-apply  dhcpbindupdate on (\r\n    summarize  dhcpbindupdate = make_list(tostring(dhcpbindupdate), 8))\r\n    | extend Log_Type = strcat(Type,\" \",dhcpbindupdate[0]),\r\n        Dest_IP = dhcpbindupdate[1],  \r\n        Source = dhcpbindupdate[2],\r\n        Action = dhcpbindupdate[3],  \r\n        Message =dhcpbindupdate[4]\r\n    | project-away RawData_subString, dhcpbindupdate;",
            "version": 1
          }
        },
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "Infoblox dhcp discover Parser",
          "dependsOn": [
            "[variables('workspace-dependency')]"
          ],
          "properties": {
            "eTag": "*",
            "displayName": "Infoblox dhcp discover Parser",
            "category": "Samples",
            "functionAlias": "Infoblox_dhcpdiscover",
            "query": "\nlet datasource = (_GetWatchlist('InfobloxDevices') | project Computer);\r\nlet RawData = Syslog\r\n    | where Computer in (datasource) //and Facility == \"local6\"\r\n    | extend Parser = extract_all(@\"^(\\d{2}\\-[a-zA-Z]{3}\\-\\d{4}\\s[0-9\\.\\:]+)?\\s?([a-zA-Z-_]+)(\\s|\\:)?(.*)\", dynamic([1,2,3,4]), SyslogMessage)[0]\r\n    | extend responseTime = todatetime(Parser[0]),\r\n            Log_Type = tostring(Parser[1]),\r\n            RawData_subString = tostring(Parser[3])\r\n    | project-away Parser;\r\nRawData\r\n    | where ProcessName == \"dhcpd\" and SyslogMessage has \"DHCPDISCOVER\"\r\n    | extend dhcpdiscover = extract_all(@\"\\w+\\s((\\S+)(\\s\\(\\S+\\))?)\\s\\w+\\s(\\S+)\\sTransID\\s([a-z0-9]+)\\:?(\\suid\\s(\\S+))?(\\snetwork\\s(\\S+)\\:)?\\s?(.*)?\", dynamic([1,2,3,4,5,6,7,8,9,10]), RawData_subString)[0]\r\n\t| mv-apply dhcpdiscover on (\r\n    summarize dhcpdiscover = make_list(tostring(dhcpdiscover), 12))\r\n    | extend Client_MAC_Address = dhcpdiscover[0], \r\n        TransID = dhcpdiscover[4],\r\n        UID = dhcpdiscover[6], \r\n        Network = dhcpdiscover[8],\r\n        Message = dhcpdiscover[9]\r\n    | project-away RawData_subString, dhcpdiscover;",
            "version": 1
          }
        },
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "Infoblox dhcp expire Parser",
          "dependsOn": [
            "[variables('workspace-dependency')]"
          ],
          "properties": {
            "eTag": "*",
            "displayName": "Infoblox dhcp expire Parser",
            "category": "Samples",
            "functionAlias": "Infoblox_dhcpexpire",
            "query": "\nlet datasource = (_GetWatchlist('InfobloxDevices') | project Computer);\r\nlet RawData = Syslog\r\n    | where Computer in (datasource) //and Facility == \"local6\"\r\n    | extend Parser = extract_all(@\"^(\\d{2}\\-[a-zA-Z]{3}\\-\\d{4}\\s[0-9\\.\\:]+)?\\s?([a-zA-Z-_]+)(\\s|\\:)?(.*)\", dynamic([1,2,3,4]), SyslogMessage)[0]\r\n    | extend responseTime = todatetime(Parser[0]),\r\n            Log_Type = tostring(Parser[1]),\r\n            RawData_subString = tostring(Parser[3])\r\n    | project-away Parser;\r\nRawData\r\n    | where ProcessName == \"dhcpd\" and SyslogMessage has \"DHCPEXPIRE\"\r\n    | extend dhcpexpire = extract_all(@\"\\w+\\s(\\S+)\\s\\w+\\s(\\S+)\", dynamic([1,2]), RawData_subString)[0]\r\n\t| mv-apply dhcpexpire on (\r\n    summarize dhcpexpire = make_list(tostring(dhcpexpire), 4))\r\n    | extend Source_IP = dhcpexpire[0],  \r\n        Dest_MAC_Address = dhcpexpire[1]\r\n    | project-away RawData_subString, dhcpexpire;",
            "version": 1
          }
        },
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "Infoblox dhcp inform Parser",
          "dependsOn": [
            "[variables('workspace-dependency')]"
          ],
          "properties": {
            "eTag": "*",
            "displayName": "Infoblox dhcp inform Parser",
            "category": "Samples",
            "functionAlias": "Infoblox_dhcpinform",
            "query": "\nlet datasource = (_GetWatchlist('InfobloxDevices') | project Computer);\r\nlet RawData = Syslog\r\n    | where Computer in (datasource)// and Facility == \"local6\"\r\n    | extend Parser = extract_all(@\"^(\\d{2}\\-[a-zA-Z]{3}\\-\\d{4}\\s[0-9\\.\\:]+)?\\s?([a-zA-Z-_]+)(\\s|\\:)?(.*)\", dynamic([1,2,3,4]), SyslogMessage)[0]\r\n    | extend responseTime = todatetime(Parser[0]),\r\n            Log_Type = tostring(Parser[1]),\r\n            RawData_subString = tostring(Parser[3])\r\n    | project-away Parser;\r\nRawData\r\n    | where ProcessName == \"dhcpd\" and SyslogMessage has \"DHCPINFORM\"\r\n    | extend dhcpinform = extract_all(@\"\\w+\\s(\\S+)\\svia\\s(\\S+)\\sTransID\\s([a-z0-9]+)\", dynamic([1,2,3]), RawData_subString)[0]\r\n    | extend Source_IP = tostring(dhcpinform[0]), \r\n        Relay = tostring(dhcpinform[1]), \r\n        TransID = tostring(dhcpinform[2])\r\n    | project-away RawData_subString, dhcpinform;",
            "version": 1
          }
        },
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "Infoblox dhcp offer Parser",
          "dependsOn": [
            "[variables('workspace-dependency')]"
          ],
          "properties": {
            "eTag": "*",
            "displayName": "Infoblox dhcp offer Parser",
            "category": "Samples",
            "functionAlias": "Infoblox_dhcpoffer",
            "query": "\nlet datasource = (_GetWatchlist('InfobloxDevices') | project Computer);\r\nlet RawData = Syslog\r\n    | where Computer in (datasource)// and Facility == \"local6\"\r\n    | extend Parser = extract_all(@\"^(\\d{2}\\-[a-zA-Z]{3}\\-\\d{4}\\s[0-9\\.\\:]+)?\\s?([a-zA-Z-_]+)(\\s|\\:)?(.*)\", dynamic([1,2,3,4]), SyslogMessage)[0]\r\n    | extend responseTime = todatetime(Parser[0]),\r\n            Log_Type = tostring(Parser[1]),\r\n            RawData_subString = tostring(Parser[3])\r\n    | project-away Parser;\r\nRawData\r\n    | where ProcessName == \"dhcpd\" and SyslogMessage has \"DHCPOFFER\"\r\n    | extend dhcpoffer = extract_all(@\"\\w+\\s(\\S+)(\\s\\w+\\s((\\S+)(\\s\\(\\S+\\))?))?\\svia\\s(\\S+)(\\srelay\\s(\\S+))?(\\slease-duration\\s(\\d+))?(\\soffered-duration\\s(\\d+))?(\\sUID\\s(\\S+))?\", dynamic([1,2,3,4,5,6,7,8,9,10,11,12,13,14]), RawData_subString)[0]\r\n\t| mv-apply dhcpoffer on (\r\n    summarize dhcpoffer = make_list(tostring(dhcpoffer), 16))\r\n    | extend IPAddress = dhcpoffer[0],  \r\n        Client_MAC_Address = dhcpoffer[3],\r\n        Interface = dhcpoffer[5],\r\n        Relay = dhcpoffer[7], \r\n        LeaseDuration = dhcpoffer[9],\r\n        OfferedDuration = dhcpoffer[11],\r\n        Client_Hostname = dhcpoffer[4],\r\n        UID = dhcpoffer[13]\r\n    | project-away RawData_subString, dhcpoffer;",
            "version": 1
          }
        },
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "Infoblox dhcp option Parser",
          "dependsOn": [
            "[variables('workspace-dependency')]"
          ],
          "properties": {
            "eTag": "*",
            "displayName": "Infoblox dhcp option Parser",
            "category": "Samples",
            "functionAlias": "Infoblox_dhcpoption",
            "query": "\nlet datasource = (_GetWatchlist('InfobloxDevices') | project Computer);\r\nlet RawData = Syslog\r\n    | where Computer in (datasource)// and Facility == \"local6\"\r\n    | extend Parser = extract_all(@\"^(\\d{2}\\-[a-zA-Z]{3}\\-\\d{4}\\s[0-9\\.\\:]+)?\\s?([a-zA-Z-_]+)(\\s|\\:)?(.*)\", dynamic([1,2,3,4]), SyslogMessage)[0]\r\n    | extend responseTime = todatetime(Parser[0]),\r\n            Log_Type = tostring(Parser[1]),\r\n            RawData_subString = tostring(Parser[3])\r\n    | project-away Parser;\r\nRawData\r\n    | where ProcessName == \"dhcpd\" and SyslogMessage has \"Option\"\r\n    | extend dhcpoption = extract_all(@'(\\d+)\\:\\s\\w+\\s\\w+\\s([A-Z\\s]+)\\s\\w+\\sfrom\\s\\S+\\s(\\S+)\\s[\\w\\s\\-]+\\\"([a-z0-9:]+)\\\"\\,\\s[\\w\\s\\-]+\\\"([a-z0-9:]+)\\\"\\sfor\\s(\\S+)\\s\\((\\S+)\\)\\s([\\w\\s]+)\\.\\s\\((\\S+)\\)', dynamic([1,2,3,4,5,6,7,8,9]), RawData_subString)[0]\r\n\t| mv-apply dhcpoption on (\r\n    summarize dhcpoption = make_list(tostring(dhcpoption), 12))\r\n    | extend Log_Type = strcat(Type,\" \",dhcpoption[0]),\r\n        Relay = dhcpoption[2],  \r\n        PacketType = dhcpoption[1],  \r\n        CircuitID = dhcpoption[3],  \r\n        RemoteID = dhcpoption[4],  \r\n        Dest_IP = dhcpoption[5],  \r\n        Dest_MAC_Address = dhcpoption[6],  \r\n        Message = dhcpoption[7],\r\n        State = dhcpoption[8]\r\n    | project-away RawData_subString, dhcpoption;",
            "version": 1
          }
        },
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "Infoblox dhcp other Parser",
          "dependsOn": [
            "[variables('workspace-dependency')]"
          ],
          "properties": {
            "eTag": "*",
            "displayName": "Infoblox dhcp other Parser",
            "category": "Samples",
            "functionAlias": "Infoblox_dhcpother",
            "query": "\nlet datasource = (_GetWatchlist('InfobloxDevices') | project Computer);\r\nlet RawData = Syslog\r\n    | where Computer in (datasource)// and Facility == \"local6\"\r\n    | extend Parser = extract_all(@\"^(\\d{2}\\-[a-zA-Z]{3}\\-\\d{4}\\s[0-9\\.\\:]+)?\\s?([a-zA-Z-_]+)(\\s|\\:)?(.*)\", dynamic([1,2,3,4]), SyslogMessage)[0]\r\n    | extend responseTime = todatetime(Parser[0]),\r\n            Log_Type = tostring(Parser[1]),\r\n            RawData_subString = tostring(Parser[3])\r\n    | project-away Parser;\r\nRawData\r\n    | where ProcessName == \"dhcpd\" and Type in (\"balanced\",\"balancing\",\"failover\")\r\n    | project-rename Message = RawData_subString;",
            "version": 1
          }
        },
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "Infoblox dhcp pack Parser",
          "dependsOn": [
            "[variables('workspace-dependency')]"
          ],
          "properties": {
            "eTag": "*",
            "displayName": "Infoblox dhcp pack Parser",
            "category": "Samples",
            "functionAlias": "Infoblox_dhcppack",
            "query": "\nlet datasource = (_GetWatchlist('InfobloxDevices') | project Computer);\r\nlet RawData = Syslog\r\n    | where Computer in (datasource) //and Facility == \"local6\"\r\n    | extend Parser = extract_all(@\"^(\\d{2}\\-[a-zA-Z]{3}\\-\\d{4}\\s[0-9\\.\\:]+)?\\s?([a-zA-Z-_]+)(\\s|\\:)?(.*)\", dynamic([1,2,3,4]), SyslogMessage)[0]\r\n    | extend responseTime = todatetime(Parser[0]),\r\n            Log_Type = tostring(Parser[1]),\r\n            RawData_subString = tostring(Parser[3])\r\n    | project-away Parser;\r\nRawData\r\n    | where ProcessName == \"dhcpd\" and SyslogMessage has \"DHCPACK\"\r\n    | extend dhcpack = extract_all(@\"(\\s\\w+\\s(\\S+))\\sto\\s(\\S+)\\svia\\s(\\S+)(\\srelay\\s(\\S+))?(\\slease-duration\\s(\\d+))?(\\s\\(([a-zA-Z]+)\\))?(\\suid\\s(\\S+))?\", dynamic([1,2,3,4,5,6,7,8,9,10,11]), RawData_subString)[0]\r\n\t| mv-apply  dhcpack on (\r\n    summarize  dhcpack = make_list(tostring( dhcpack), 14))\r\n    | extend IPAddress = dhcpack[1], \r\n        Client_MAC_Address = dhcpack[2],\r\n        Interface = dhcpack[4],\r\n        Relay = dhcpack[5], \r\n        LeaseDuration = dhcpack[7],\r\n        Client_Hostname = dhcpack[3],\r\n        State = dhcpack[10]\r\n    | extend dhcpack2 = extract_all(@\"to\\s(\\S+)\\s\\((\\S+)\\)\\svia\\s(\\S+)\", dynamic([1,2,3]), RawData_subString)[0]\r\n    | extend IPAddress = iif(isempty(dhcpack),tostring(dhcpack2[0]),IPAddress),\r\n            Client_MAC_Address = iif(isempty(dhcpack),tostring(dhcpack2[1]),Client_MAC_Address),\r\n            Interface = iif(isempty(dhcpack),tostring(dhcpack2[2]),Interface)\r\n    | project-away RawData_subString, dhcpack, dhcpack2;",
            "version": 1
          }
        },
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "Infoblox dhcp release Parser",
          "dependsOn": [
            "[variables('workspace-dependency')]"
          ],
          "properties": {
            "eTag": "*",
            "displayName": "Infoblox dhcp release Parser",
            "category": "Samples",
            "functionAlias": "Infoblox_dhcprelease",
            "query": "\nlet datasource = (_GetWatchlist('InfobloxDevices') | project Computer);\r\nlet RawData = Syslog\r\n    | where Computer in (datasource)// and Facility == \"local6\"\r\n    | extend Parser = extract_all(@\"^(\\d{2}\\-[a-zA-Z]{3}\\-\\d{4}\\s[0-9\\.\\:]+)?\\s?([a-zA-Z-_]+)(\\s|\\:)?(.*)\", dynamic([1,2,3,4]), SyslogMessage)[0]\r\n    | extend responseTime = todatetime(Parser[0]),\r\n            Log_Type = tostring(Parser[1]),\r\n            RawData_subString = tostring(Parser[3]);\r\nRawData\r\n    | where ProcessName == \"dhcpd\" and SyslogMessage has \"DHCPRELEASE\"\r\n    | extend dhcprelease = extract_all(@\"of\\s(\\S+)\\sfrom\\s((\\S+)(\\s\\(\\S+\\))?)\\svia\\s(\\S+)(\\s\\((\\w+)\\))?(\\sTransID\\s([a-z0-9]+)\\s)?\", dynamic([1,2,3,4,5,6,7,8,9,10,11,12]), RawData_subString)[0]\r\n\t| mv-apply dhcprelease on (\r\n    summarize dhcprelease = make_list(tostring(dhcprelease), 14))\r\n    | extend IPAddress = dhcprelease[0], \r\n        Client_MAC_Address = dhcprelease[2],\r\n        Client_Hostname = extract(@'\\((\\S+)\\)',1,tostring(dhcprelease[3])),\r\n        Relay = dhcprelease[4], \r\n        TransID = dhcprelease[8],\r\n        State = dhcprelease[6]\r\n    | project-away RawData_subString, dhcprelease;",
            "version": 1
          }
        },
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "Infoblox dhcp removed Parser",
          "dependsOn": [
            "[variables('workspace-dependency')]"
          ],
          "properties": {
            "eTag": "*",
            "displayName": "Infoblox dhcp removed Parser",
            "category": "Samples",
            "functionAlias": "Infoblox_dhcpremoved",
            "query": "\nlet datasource = (_GetWatchlist('InfobloxDevices') | project Computer);\r\nlet RawData = Syslog\r\n    | where Computer in (datasource)// and Facility == \"local6\"\r\n    | extend Parser = extract_all(@\"^(\\d{2}\\-[a-zA-Z]{3}\\-\\d{4}\\s[0-9\\.\\:]+)?\\s?([a-zA-Z-_]+)(\\s|\\:)?(.*)\", dynamic([1,2,3,4]), SyslogMessage)[0]\r\n    | extend responseTime = todatetime(Parser[0]),\r\n            Log_Type = tostring(Parser[1]),\r\n            RawData_subString = tostring(Parser[3])\r\n    | project-away Parser;\r\nRawData\r\n    | where ProcessName == \"dhcpd\" and SyslogMessage has \"Removed\"\r\n    | extend dhcpremoved = extract_all(@\"([\\w\\s]+)(from|on)\\s(\\S+)(\\sto\\s(\\S+))?\", dynamic([1,2,3,4,5]), RawData_subString)[0]\r\n\t| mv-apply dhcpremoved on (\r\n    summarize dhcpremoved = make_list(tostring(dhcpremoved), 8))\r\n    | extend Log_Type = strcat(Type,\" \",dhcpremoved[0]),\r\n        Source = dhcpremoved[2],  \r\n        Dest = dhcpremoved[4]\r\n    | project-away RawData_subString, dhcpremoved;",
            "version": 1
          }
        },
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "Infoblox dhcp request Parser",
          "dependsOn": [
            "[variables('workspace-dependency')]"
          ],
          "properties": {
            "eTag": "*",
            "displayName": "Infoblox dhcp request Parser",
            "category": "Samples",
            "functionAlias": "Infoblox_dhcprequest",
            "query": "\nlet datasource = (_GetWatchlist('InfobloxDevices') | project Computer);\r\nlet RawData = Syslog\r\n    | where Computer in (datasource)// and Facility == \"local6\"\r\n    | extend Parser = extract_all(@\"^(\\d{2}\\-[a-zA-Z]{3}\\-\\d{4}\\s[0-9\\.\\:]+)?\\s?([a-zA-Z-_]+)(\\s|\\:)?(.*)\", dynamic([1,2,3,4]), SyslogMessage)[0]\r\n    | extend responseTime = todatetime(Parser[0]),\r\n            Log_Type = tostring(Parser[1]),\r\n            RawData_subString = tostring(Parser[3])\r\n    | project-away Parser;\r\nRawData\r\n    | where ProcessName == \"dhcpd\" and SyslogMessage has \"DHCPREQUEST\"\r\n    | extend dhcprequest = extract_all(@\"for\\s((\\S+)(\\s\\(\\S+\\))?)\\sfrom\\s((\\S+)(\\s\\(\\S+\\))?)\\svia\\s(\\S+)(\\sTransID\\s([a-z0-9]+)\\s)?(uid\\s([a-z0-9:]+)|uid$|uid)?(\\s\\(([a-zA-Z]+)\\)$)?\", dynamic([1,2,3,4,5,6,7,8,9,10,11,12]), RawData_subString)[0]\r\n    | mv-apply dhcprequest on (\r\n    summarize dhcprequest = make_list(tostring(dhcprequest), 14))\r\n\t| extend IPAddress = dhcprequest[1], \r\n        Client_MAC_Address = dhcprequest[4],\r\n        Client_Hostname = extract(@\"\\((\\S+)\\)\",1,tostring(dhcprequest[5])),\r\n        Relay = dhcprequest[6], \r\n        TransID = dhcprequest[8],\r\n        UID = dhcprequest[10],\r\n        State = dhcprequest[11]\r\n    | project-away RawData_subString, dhcprequest;",
            "version": 1
          }
        },
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "Infoblox dhcp session Parser",
          "dependsOn": [
            "[variables('workspace-dependency')]"
          ],
          "properties": {
            "eTag": "*",
            "displayName": "Infoblox dhcp session Parser",
            "category": "Samples",
            "functionAlias": "Infoblox_dhcpsession",
            "query": "\nlet datasource = (_GetWatchlist('InfobloxDevices') | project Computer);\r\nlet RawData = Syslog\r\n    | where Computer in (datasource)// and Facility == \"local6\"\r\n    | extend Parser = extract_all(@\"^(\\d{2}\\-[a-zA-Z]{3}\\-\\d{4}\\s[0-9\\.\\:]+)?\\s?([a-zA-Z-_]+)(\\s|\\:)?(.*)\", dynamic([1,2,3,4]), SyslogMessage)[0]\r\n    | extend responseTime = todatetime(Parser[0]),\r\n            Log_Type = tostring(Parser[1]),\r\n            RawData_subString = tostring(Parser[3])\r\n    | project-away Parser;\r\nRawData\r\n    | where ProcessName == \"dhcpd\" and SyslogMessage has \"r-l-e\"\r\n    | extend dhcpsession = extract_all(@\"\\:?([0-9.]+)\\,([a-zA-Z]+)\\,([a-zA-Z0-9-]+)\\,([a-z0-9:]+)\\,([0-9]+)\\,([0-9]+)\\,([0-9]+)?\\,([\\w$\\s]+)\\,([0-9.]+)\\,([0-9]+)\\,([0-9-.]+)\", dynamic([1,2,3,4,5,6,7,8,9,10,11]), RawData_subString)[0]\r\n\t| mv-apply  dhcpsession on (\r\n    summarize dhcpsession = make_list(tostring(dhcpsession), 14))\r\n    | extend Dest_IP = dhcpsession[0],  \r\n        Signature = dhcpsession[1],\r\n        DNS_Hostname = dhcpsession[2],  \r\n        Dest_MAC_Address = dhcpsession[3],\r\n        StartTime = dhcpsession[4],  \r\n        EndTime = dhcpsession[5],  \r\n        Network = dhcpsession[8],\r\n        NetworkRange = dhcpsession[10]\r\n    | project-away RawData_subString, dhcpsession;",
            "version": 1
          }
        },
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "Infoblox dns consolidated Parser",
          "dependsOn": [
            "[variables('workspace-dependency')]"
          ],
          "properties": {
            "eTag": "*",
            "displayName": "Infoblox dns consolidated Parser",
            "category": "Samples",
            "functionAlias": "Infoblox_dns_consolidated",
            "query": "\nunion isfuzzy=true\r\nInfoblox_dnsclient,Infoblox_dnsgss,Infoblox_dnszone,Infoblox_allotherdnsTypes",
            "version": 1
          }
        },
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "Infoblox dns client Parser",
          "dependsOn": [
            "[variables('workspace-dependency')]"
          ],
          "properties": {
            "eTag": "*",
            "displayName": "Infoblox dns client Parser",
            "category": "Samples",
            "functionAlias": "Infoblox_dnsclient",
            "query": "\nlet datasource = (_GetWatchlist('InfobloxDevices') | project Computer);\r\nlet RawData = Syslog\r\n    | where Computer in (datasource) //and Facility == \"local6\"\r\n    | extend Parser = extract_all(@\"^(\\d{2}\\-[a-zA-Z]{3}\\-\\d{4}\\s[0-9\\.\\:]+)?\\s?([a-zA-Z-_]+)(\\s|\\:)?(.*)\", dynamic([1,2,3,4]), SyslogMessage)[0]\r\n    | extend responseTime = todatetime(Parser[0]),\r\n            Log_Type = tostring(Parser[1]),\r\n            RawData_subString = tostring(Parser[3])\r\n    | project-away Parser;\r\nRawData \r\n    | where ProcessName == \"named\" and SyslogMessage has \"client\"\r\n    | extend dnsclient = extract_all(@\"(\\@[a-z0-9]+\\s)?([0-9\\.]+)\\#(\\d+)(\\s\\((\\S+)\\))?\\:\\s(?:view\\s)?(\\S+)?(?:\\:\\s)?((UDP|TCP)\\:\\s?)??query\\:\\s(\\S+)\\s(\\S+)\\s(\\S+)(\\sresponse:\\s([A-Z]+))?\\s(\\S+)(.*)\",dynamic([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]), RawData_subString)[0]\r\n\t| mv-apply dnsclient on (\r\n    summarize dnsclient = make_list(tostring(dnsclient), 17))\r\n    | extend Client_IP = dnsclient[1],\r\n        Port = dnsclient[2],\r\n        Protocol = dnsclient[7],\r\n        QueryDomainName = dnsclient[8],\r\n        ClassName = dnsclient[9],\r\n        RecordType = dnsclient[10],\r\n        ResponseCode = dnsclient[12],\r\n        Flag = dnsclient[13],\r\n        Message = dnsclient[14]\r\n    | project-away RawData_subString, dnsclient;",
            "version": 1
          }
        },
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "Infoblox dns gss Parser",
          "dependsOn": [
            "[variables('workspace-dependency')]"
          ],
          "properties": {
            "eTag": "*",
            "displayName": "Infoblox dns gss Parser",
            "category": "Samples",
            "functionAlias": "Infoblox_dnsgss",
            "query": "\nlet datasource = (_GetWatchlist('InfobloxDevices') | project Computer);\r\nlet RawData = Syslog\r\n    | where Computer in (datasource)// and Facility == \"local6\"\r\n    | extend Parser = extract_all(@\"^(\\d{2}\\-[a-zA-Z]{3}\\-\\d{4}\\s[0-9\\.\\:]+)?\\s?([a-zA-Z-_]+)(\\s|\\:)?(.*)\", dynamic([1,2,3,4]), SyslogMessage)[0]\r\n    | extend responseTime = todatetime(Parser[0]),\r\n            Log_Type = tostring(Parser[1]),\r\n            RawData_subString = tostring(Parser[3])\r\n    | project-away Parser;\r\nRawData\r\n    | where ProcessName == \"named\" and SyslogMessage has \"gss_accept_sec_context\"\r\n    | extend dnsgss = extract_all(@\":\\s(.*)\", dynamic([1,2]), RawData_subString)[0]\r\n    | extend Message = tostring(dnsgss[0])\r\n    | project-away dnsgss, RawData_subString;\r\n",
            "version": 1
          }
        },
        {
          "type": "savedSearches",
          "apiVersion": "2020-08-01",
          "name": "Infoblox dns zone Parser",
          "dependsOn": [
            "[variables('workspace-dependency')]"
          ],
          "properties": {
            "eTag": "*",
            "displayName": "Infoblox dns zone Parser",
            "category": "Samples",
            "functionAlias": "Infoblox_dnszone",
            "query": "\nlet datasource = (_GetWatchlist('InfobloxDevices') | project Computer);\r\nlet RawData = Syslog\r\n    | where Computer in (datasource)// and Facility == \"local6\"\r\n    | extend Parser = extract_all(@\"^(\\d{2}\\-[a-zA-Z]{3}\\-\\d{4}\\s[0-9\\.\\:]+)?\\s?([a-zA-Z-_]+)(\\s|\\:)?(.*)\", dynamic([1,2,3,4]), SyslogMessage)[0]\r\n    | extend responseTime = todatetime(Parser[0]),\r\n            Log_Type = tostring(Parser[1]),\r\n            RawData_subString = tostring(Parser[3])\r\n    | project-away Parser;\r\nRawData\r\n    | where ProcessName == \"named\" and SyslogMessage has \"zone\"\r\n    | extend dnszone = extract_all(@\"([a-z0-9\\.\\-]+)\\/([A-Z]+)\\:(\\s[A-Z]+)?\\s(\\w+\\s\\w+)\\s(for\\s\\'(\\S+)?\\':)?((\\d+)\\.?)?(\\s(\\with\\s|(\\d+)\\sIN\\s)([A-Z]+)\\s)?(\\(?serial\\s(\\d+)\\)?)?(.*)\", dynamic([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]), RawData_subString)[0]\r\n\t| mv-apply dnszone on (\r\n    summarize dnszone = make_list(tostring(dnszone), 17))\r\n    | extend Zone = dnszone[0],\r\n        Action = dnszone[3],\r\n        Client_Hostname = dnszone[5],\r\n        TransID = dnszone[7],\r\n        Serial = dnszone[13],\r\n        TTL = dnszone[10],\r\n        RecordType = dnszone[11]\r\n    | extend dnszone_substring = extract_all(@\"\\s?([a-zA-Z0-9\\.\\-\\_]+)\\.\\s(.*)\", dynamic([1,2]),tostring(dnszone[14]))[0]\r\n    | extend Host = tostring(dnszone_substring[0]),\r\n        Message = tostring(dnszone_substring[1])\r\n    | project-away RawData_subString, dnszone_substring, dnszone;",
            "version": 1
          }
        }
      ]
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',parameters('analytic1-id'))]",
      "apiVersion": "2021-03-01-preview",
      "kind": "Scheduled",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "description": "This creates an incident in the event a client generates excessive amounts of DNS queries for non-existent domains.",
        "displayName": "Excessive NXDOMAIN DNS Queries",
        "enabled": false,
        "query": "\nlet threshold = 200;\nInfobloxNIOS\n| where ProcessName =~ \"named\" and Log_Type =~ \"client\"\n| where isnotempty(ResponseCode)\n| where ResponseCode =~ \"NXDOMAIN\"\n| summarize count() by Client_IP, bin(TimeGenerated,15m)\n| where count_ > threshold\n| join kind=inner (InfobloxNIOS\n    | where ProcessName =~ \"named\" and Log_Type =~ \"client\"\n    | where isnotempty(ResponseCode)\n    | where ResponseCode =~ \"NXDOMAIN\"\n    ) on Client_IP\n| extend timestamp = TimeGenerated, IPCustomEntity = Client_IP\n",
        "queryFrequency": "PT1H",
        "queryPeriod": "PT1H",
        "severity": "Medium",
        "suppressionDuration": "PT1H",
        "suppressionEnabled": false,
        "triggerOperator": "GreaterThan",
        "triggerThreshold": 0,
        "tactics": [
          "CommandAndControl"
        ],
        "entityMappings": [
          {
            "entityType": "IP",
            "fieldMappings": [
              {
                "columnName": "IPCustomEntity",
                "identifier": "Address"
              }
            ]
          }
        ]
      }
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',parameters('analytic2-id'))]",
      "apiVersion": "2021-03-01-preview",
      "kind": "Scheduled",
      "location": "[parameters('workspace-location')]",
      "properties": {
        "description": "This creates an incident in the event that an excessive amount of DHCPREQUEST have been recieved by a DHCP Server and could potentially be an indication of a DHCP Starvation Attack.",
        "displayName": "Potential DHCP Starvation Attack",
        "enabled": false,
        "query": "\nlet threshold = 1000;\nInfobloxNIOS\n| where ProcessName =~ \"dhcpd\" and Log_Type =~ \"DHCPREQUEST\"\n| summarize count() by ServerIP, bin(TimeGenerated,5m)\n| where count_ > threshold\n| join kind=inner (InfobloxNIOS\n    | where ProcessName =~ \"dhcpd\" and Log_Type =~ \"DHCPREQUEST\"\n    ) on ServerIP\n| extend timestamp = TimeGenerated, IPCustomEntity = ServerIP\n",
        "queryFrequency": "PT1H",
        "queryPeriod": "PT1H",
        "severity": "Medium",
        "suppressionDuration": "PT1H",
        "suppressionEnabled": false,
        "triggerOperator": "GreaterThan",
        "triggerThreshold": 0,
        "tactics": [
          "InitialAccess"
        ],
        "entityMappings": [
          {
            "entityType": "IP",
            "fieldMappings": [
              {
                "columnName": "IPCustomEntity",
                "identifier": "Address"
              }
            ]
          }
        ]
      }
    },
    {
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/',parameters('watchlist1-id'))]",
      "type": "Microsoft.OperationalInsights/workspaces/providers/Watchlists",
      "kind": "scheduled",
      "properties": {
        "displayName": "InfobloxDevices",
        "source": "ComputerNames.csv",
        "description": "Watchlist provide lookup for different hostnames of Infoblox devices.",
        "provider": "Custom",
        "isDeleted": false,
        "labels": ["watchlistdescription"],
        "defaultDuration": "P1000Y",
        "contentType": "Text/Csv",
        "numberOfLinesToSkip": 0,
        "itemsSearchKey": "Computer",
        "rawContent": "Computer\r\ncomputer1.domain.org"
      },
      "apiVersion": "2021-03-01-preview"
    },
    {
      "type": "Microsoft.OperationalInsights/workspaces/providers/metadata",
      "apiVersion": "2021-03-01-preview",
      "properties": {
        "version": "1.0.2",
        "kind": "Solution",
        "contentId": "[variables('_sourceId')]",
        "parentId": "[variables('_sourceId')]",
        "source": {
          "kind": "Solution",
          "name": "Infoblox NIOS",
          "sourceId": "[variables('_sourceId')]"
        },
        "author": {
          "name": "Nikhil Tripathi",
          "email": "v-ntripathi@microsoft.com"
        },
        "support": {
          "name": "Microsoft Corporation",
          "email": "support@microsoft.com",
          "tier": "Microsoft",
          "link": "https://support.microsoft.com"
        },
        "dependencies": {
          "operator": "AND",
          "criteria": [
            {
              "kind": "DataConnector",
              "contentId": "[variables('_InfobloxNIOSConnector')]",
              "version": "1.0.2"
            },
            {
              "kind": "Workbook",
              "contentId": "[variables('_Infoblox-Workbook-V2_workbook')]",
              "version": "1.0.2"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('_InfobloxNIOS_Parser')]",
              "version": "1.0.2"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('_Infoblox_all_Parser')]",
              "version": "1.0.2"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('_Infoblox_allotherdhcpdTypes_Parser')]",
              "version": "1.0.2"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('_Infoblox_allotherdnsTypes_Parser')]",
              "version": "1.0.2"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('_Infoblox_dhcp_consolidated_Parser')]",
              "version": "1.0.2"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('_Infoblox_dhcpadded_Parser')]",
              "version": "1.0.2"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('_Infoblox_dhcpbindupdate_Parser')]",
              "version": "1.0.2"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('_Infoblox_dhcpdiscover_Parser')]",
              "version": "1.0.2"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('_Infoblox_dhcpexpire_Parser')]",
              "version": "1.0.2"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('_Infoblox_dhcpinform_Parser')]",
              "version": "1.0.2"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('_Infoblox_dhcpoffer_Parser')]",
              "version": "1.0.2"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('_Infoblox_dhcpoption_Parser')]",
              "version": "1.0.2"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('_Infoblox_dhcpother_Parser')]",
              "version": "1.0.2"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('_Infoblox_dhcppack_Parser')]",
              "version": "1.0.2"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('_Infoblox_dhcprelease_Parser')]",
              "version": "1.0.2"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('_Infoblox_dhcpremoved_Parser')]",
              "version": "1.0.2"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('_Infoblox_dhcprequest_Parser')]",
              "version": "1.0.2"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('_Infoblox_dhcpsession_Parser')]",
              "version": "1.0.2"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('_Infoblox_dns_consolidated_Parser')]",
              "version": "1.0.2"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('_Infoblox_dnsclient_Parser')]",
              "version": "1.0.2"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('_Infoblox_dnsgss_Parser')]",
              "version": "1.0.2"
            },
            {
              "kind": "Parser",
              "contentId": "[variables('_Infoblox_dnszone_Parser')]",
              "version": "1.0.2"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('_ExcessiveNXDOMAINDNSQueries_AnalyticalRules')]",
              "version": "1.0.2"
            },
            {
              "kind": "AnalyticsRule",
              "contentId": "[variables('_PotentialDHCPStarvationAttack_AnalyticalRules')]",
              "version": "1.0.2"
            },
            {
              "kind": "Watchlist",
              "contentId": "[variables('_InfobloxDevices')]",
              "version": "1.0.2"
            }
          ]
        },
        "firstPublishDate": "2022-04-01",
        "providers": [
          "Microsoft"
        ],
        "categories": {
          "domains": [
            "Security - Network"
          ]
        }
      },
      "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/', variables('_sourceId'))]"
    }
  ],
  "outputs": {}
}
