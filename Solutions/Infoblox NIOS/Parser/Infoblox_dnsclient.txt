// Title:           Infoblox NIOS Data Parser
// Author:          Microsoft
// Version:         1.1
// Last Updated:    01/03/2022
// Comment:         Updated to only parse the MSG (RFC3164) part of the Syslog message. Excluded the Header.
//
// DESCRIPTION:
// This parser takes raw Infoblox NIOS DHCP and DNS logs from a Syslog data stream and parses the data into a normalized schema
//
// USAGE:
// 1. Open Log Analytics/Azure Sentinel Logs blade. Copy the query below and paste into the Logs query window. 
// 2. Click the Save button above the query. A pane will appear on the right, select "as Function" from the drop down. Enter a Function Name.
// 3. Function App usually take 10-15 minutes to activate. You can then use Function Alias for other queries
//
// REFERENCES: 
// Using functions in Azure monitor log queries: https://docs.microsoft.com/azure/azure-monitor/log-query/functions
// Infoblox NIOS logging formats: https://docs.infoblox.com/display/NAG8/Using+a+Syslog+Server
//
// LOG SAMPLES:
// This parser assumes the raw log are formatted as follows:
// 
//      May 13 12:05:52 10.0.0.0 dhcpd[30174]: DHCPDISCOVER from 0a:0b:0c:0d::0f via eth2 TransID 5daf9374: network 10.0.0.0/24: no free leases
//      May 13 12:05:52 10.1.1.1 named[11325]: zone voip.abc.com/IN: ZRQ applied transaction 0101010 with SOA serial 9191919. Zone version is now 0202020.
let datasource = (_GetWatchlist('InfobloxDevices') | project Computer);
let RawData = Syslog
    | where Computer in (datasource) //and Facility == "local6"
    | extend Parser = extract_all(@"^(\d{2}\-[a-zA-Z]{3}\-\d{4}\s[0-9\.\:]+)?\s?([a-zA-Z-_]+)(\s|\:)?(.*)", dynamic([1,2,3,4]), SyslogMessage)[0]
    | extend responseTime = todatetime(Parser[0]),
            Log_Type = tostring(Parser[1]),
            RawData_subString = tostring(Parser[3])
    | project-away Parser;
RawData 
    | where ProcessName == "named" and SyslogMessage has "client"
    | extend dnsclient = extract_all(@"(\@[a-z0-9]+\s)?([0-9\.]+)\#(\d+)(\s\((\S+)\))?\:\s(?:view\s)?(\S+)?(?:\:\s)?((UDP|TCP)\:\s?)??query\:\s(\S+)\s(\S+)\s(\S+)(\sresponse:\s([A-Z]+))?\s(\S+)(.*)",dynamic([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]), RawData_subString)[0]
	| mv-apply dnsclient on (
    summarize dnsclient = make_list(tostring(dnsclient), 17))
    | extend Client_IP = dnsclient[1],
        Port = dnsclient[2],
        Protocol = dnsclient[7],
        QueryDomainName = dnsclient[8],
        ClassName = dnsclient[9],
        RecordType = dnsclient[10],
        ResponseCode = dnsclient[12],
        Flag = dnsclient[13],
        Message = dnsclient[14]
    | project-away RawData_subString, dnsclient;